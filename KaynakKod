using System;
using System.Collections.Generic;

namespace HastaTakipSistemi
{
    class Program
    {
        // Hasta bilgilerini tutan sınıf
        public class Hasta
        {
            public int HastaID { get; set; }
            public string Ad { get; set; }
            public string soyAd { get; set; }
            public int Yas { get; set; }
            public string SaglikDurumu { get; set; }
            public string Telefon { get; set; }
            public string Eposta { get; set; }
            public bool EngelliDurumu { get; set; }
        }

        // Randevu bilgilerini tutan sınıf
        public class Randevu
        {
            public int RandevuID { get; set; }
            public int HastaID { get; set; }
            public string DoktorAdi { get; set; }
            public string Il { get; set; }
            public string Ilce { get; set; }
            public string Hastane { get; set; }
            public string Klinik { get; set; }
            public string MuayeneYeri { get; set; }
            public DateTime Tarih { get; set; }
        }

        // Hasta ve randevu listelerini saklayan global değişkenler
        static List<Hasta> Hastalar = new List<Hasta>();
        static List<Randevu> Randevular = new List<Randevu>();

        // ID sayaçları (otomatik ID üretimi için kullanılır)
        static int HastaIDSayac = 1;
        static int RandevuIDSayac = 1;

        static void Main(string[] args)
        {
            // Ana menü döngüsü
            while (true)
            {
                Console.WriteLine("\nDijital Hasta Takip ve Randevu Sistemi");
                Console.WriteLine("1. Yeni Hasta Kaydı");
                Console.WriteLine("2. Hasta Listesini Görüntüle");
                Console.WriteLine("3. Randevu Oluştur");
                Console.WriteLine("4. Randevuları Görüntüle");
                Console.WriteLine("5. Çıkış");
                Console.Write("Seçiminizi yapın: ");

                // Kullanıcıdan seçim alınır ve ilgili işlem çağrılır
                string secim = Console.ReadLine();
                if (secim == "1") HastaKaydet();
                else if (secim == "2") HastaListesiGoruntule();
                else if (secim == "3") RandevuOlustur();
                else if (secim == "4") RandevulariGoruntule();
                else if (secim == "5") return;
                else Console.WriteLine("Geçersiz seçim. Tekrar deneyin.");
            }
        }

        // Yeni hasta kaydı yapan metot
        static void HastaKaydet()
        {
            Console.WriteLine("\nYeni Hasta Kaydı");
            Console.Write("Ad: ");
            string ad = Console.ReadLine();
            Console.Write("SoyAd: ");
            string soyAd = Console.ReadLine();
            Console.Write("Yaş: ");
            int yas = int.Parse(Console.ReadLine());
            Console.Write("Sağlık Durumu: ");
            string saglikDurumu = Console.ReadLine();
            Console.Write("Telefon: ");
            string telefon = Console.ReadLine();
            Console.Write("E-posta: ");
            string eposta = Console.ReadLine();
            Console.Write("Engelli durumu var mı? (E/H): ");
            bool engelliDurumu = Console.ReadLine() == "E";

            // Yeni hasta bilgilerini listeye ekler
            Hastalar.Add(new Hasta
            {
                HastaID = HastaIDSayac++,
                Ad = ad,
                soyAd = soyAd,
                Yas = yas,
                SaglikDurumu = saglikDurumu,
                Telefon = telefon,
                Eposta = eposta,
                EngelliDurumu = engelliDurumu
            });

            Console.WriteLine("Hasta kaydedildi");
        }

        // Hasta listesini görüntüleyen metot
        static void HastaListesiGoruntule()
        {
            Console.WriteLine("\nHasta Listesi");
            foreach (var hasta in Hastalar)
            {
                Console.WriteLine("ID: " + hasta.HastaID + ", Ad: " + hasta.Ad + ", Soyadı: " + hasta.soyAd + ", Yaş: " + hasta.Yas + ", Sağlık Durumu: " + hasta.SaglikDurumu +
                                  ", Telefon: " + hasta.Telefon + ", E-posta: " + hasta.Eposta + ", Engelli Durumu: " + (hasta.EngelliDurumu ? "Evet" : "Hayır"));
            }
        }

        // Yeni randevu oluşturan metot
        static void RandevuOlustur()
        {
            Console.WriteLine("\nRandevu Oluştur");
            Console.Write("Hasta ID: ");
            int hastaID = int.Parse(Console.ReadLine());
            Console.Write("Doktor Adı: ");
            string doktorAdi = Console.ReadLine();
            Console.Write("İl: ");
            string il = Console.ReadLine();
            Console.Write("İlçe: ");
            string ilce = Console.ReadLine();
            Console.Write("Hastane: ");
            string hastane = Console.ReadLine();
            Console.Write("Klinik: ");
            string klinik = Console.ReadLine();
            Console.Write("Muayene Yeri: ");
            string muayeneYeri = Console.ReadLine();
            Console.Write("Randevu Tarihi (yıl ay gün saat): ");
            DateTime tarih = DateTime.Parse(Console.ReadLine());

            // Aynı doktor için aynı tarih ve saatte randevu varsa hata verir
            foreach (var randevu in Randevular)
            {
                if (randevu.DoktorAdi == doktorAdi && randevu.Tarih == tarih)
                {
                    Console.WriteLine("Hata Aynı doktor için bu tarih ve saatte randevu var.");
                    return;
                }
            }

            // Yeni randevu bilgilerini listeye ekler
            Randevular.Add(new Randevu
            {
                RandevuID = RandevuIDSayac++,
                HastaID = hastaID,
                DoktorAdi = doktorAdi,
                Il = il,
                Ilce = ilce,
                Hastane = hastane,
                Klinik = klinik,
                MuayeneYeri = muayeneYeri,
                Tarih = tarih
            });

            Console.WriteLine("Randevu oluşturuldu");
        }

        // Randevu listesini görüntüleyen metot
        static void RandevulariGoruntule()
        {
            Console.WriteLine("\nRandevu Listesi");
            foreach (var randevu in Randevular)
            {
                // Randevunun hasta bilgilerini bul ve listele
                var hasta = Hastalar.Find(h => h.HastaID == randevu.HastaID);
                Console.WriteLine("Randevu ID: " + randevu.RandevuID + ", Hasta: " + hasta.Ad + " Soyadı: " + hasta.soyAd + ", Doktor: " + randevu.DoktorAdi +
                                  ", İl: " + randevu.Il + ", İlçe: " + randevu.Ilce + ", Hastane: " + randevu.Hastane +
                                  ", Klinik: " + randevu.Klinik + ", Muayene Yeri: " + randevu.MuayeneYeri + ", Tarih: " + randevu.Tarih);
            }
        }
    }
}
